JavaScript works in three phases during execution:

1. Global Execution Context (GEC)
The Global Execution Context is created when the JavaScript engine starts running a script.
The this keyword:
In a browser, this refers to the global window object.
In Node.js, this refers to an empty object {}.
It is the default context in which code is executed unless explicitly inside a function.


2. Memory Phase (Creation Phase)
In this phase, the JavaScript engine scans the code and:
Allocates memory for variables and functions.
Variables are initialized to undefined.
Functions are assigned their entire function definition.
No actual code execution happens in this phase.


3. Execution Phase
The JavaScript engine executes the code line by line.
Variables get their actual values.
Functions are executed when called, creating a new Function Execution Context (FEC).
The Function Execution Context also has two sub-phases:
Memory Phase: Reserves memory for variables and initializes them (e.g., variables to undefined and function definitions).
Execution Phase: Runs the code inside the function.

The return value of the function is sent back to the Global Execution Context.
Short and Clear Explanation


Global Execution Context (GEC): The base environment where the script starts, setting this to window (browser) or {} (Node.js).
Memory Phase: Allocates memory for variables (undefined) and functions (definitions).
Execution Phase: Executes code line-by-line. Functions create their own Function Execution Context that works like GEC but limited to the function's scope.
Each Function Execution Context completes and passes its return value back to the Global Execution Context.




JavaScript Execution & Call Stack
1. How JavaScript Executes Code
JavaScript is single-threaded, meaning it executes one operation at a time in a synchronous manner. It uses the Execution Context and Call Stack to manage function calls.

2. JavaScript Execution Context
When JavaScript runs code, it creates an Execution Context that consists of three phases:

1️⃣ Creation Phase (Memory Allocation)
Reserves memory for variables and functions.

Variables are initialized as undefined.

Functions are stored in memory.

2️⃣ Execution Phase
Executes the code line by line.

Assigns values to variables.

Calls functions.

3️⃣ Garbage Collection (Optional)
Removes unused memory.

3. Call Stack – The Heart of JavaScript Execution
The Call Stack is a data structure that manages function execution in JavaScript using LIFO (Last In, First Out).

📌 Key Points:

When a function is called, it is pushed onto the stack.

When a function finishes, it is popped off the stack.

JavaScript runs the function at the top of the stack first.

Example:
javascript
Copy
Edit
function first() {
    console.log("First function");
    second();
}

function second() {
    console.log("Second function");
    third();
}

function third() {
    console.log("Third function");
}

first();
Step-by-Step Call Stack Execution:
Stack Operation	Call Stack
first() is called	first()
first() calls second()	first() → second()
second() calls third()	first() → second() → third()
third() finishes (popped)	first() → second()
second() finishes (popped)	first()
first() finishes (popped)	(empty)
🟢 Output:

sql
Copy
Edit
First function
Second function
Third function
4. What Happens If Call Stack Overflows?
If functions keep calling each other infinitely, the stack overflows, leading to a Stack Overflow Error.

javascript
Copy
Edit
function infiniteLoop() {
    infiniteLoop(); // No exit condition!
}

infiniteLoop();  // ❌ Stack Overflow Error
💡 Fix: Always ensure functions have an exit condition.

5. Call Stack & Asynchronous JavaScript
JavaScript can handle asynchronous tasks (like API calls, setTimeout) using:

Call Stack (synchronous tasks)

Web APIs (handles async tasks like setTimeout)

Callback Queue (stores async callbacks)

Event Loop (moves callbacks from queue to stack)

🔹 Example with setTimeout (Async Code Execution)

javascript
Copy
Edit
console.log("Start");

setTimeout(() => {
    console.log("Timeout callback");
}, 2000);

console.log("End");
🔸 Execution Order:

pgsql
Copy
Edit
Start
End
Timeout callback (after 2 seconds)
💡 Why?

Synchronous tasks (console.log("Start"), console.log("End")) run first.

setTimeout() is sent to Web API.

After 2s, the callback moves to the Callback Queue.

Event Loop moves it to the Call Stack when it is empty.

🔹 Summary
JavaScript runs in an Execution Context with a Call Stack.

The Call Stack follows LIFO (Last In, First Out).

Synchronous tasks execute first; async tasks use Web APIs & Callback Queue.

A Stack Overflow occurs if functions call each other infinitely.

The Event Loop ensures smooth async execution.

Let me know if you need more clarity! 🚀😊









